#include<ieee80211_openessid.h>

//#define OPENESSID_DEBUG

#ifdef OPENESSID_DEBUG
#define dbg_print(fmt , arg ...) printk("OPENESSID :"fmt,##arg)
#else
#define dbg_print(fmt,arg ...) do{}while(0)
#endif

struct ieee80211_essid_table g_essid_table[IEEE80211_STORE_ESSID] = {0};


int ieee80211_check_essid(struct ieee80211vap *vap, char *essid, u_int32_t len)
{
	struct ieee80211_scan_entry *entry, *next;

	ieee80211_scan_table_t table = ieee80211_vap_get_scan_table(vap);

	if(table == NULL)
		return 0;

	spin_lock(&(table->st_lock));
	TAILQ_FOREACH_SAFE(entry, &(table->st_entry), se_list, next){

		if(len != entry->se_ssid[1])
			continue;

		if(OS_MEMCMP(essid , entry->se_ssid + 2, entry->se_ssid[1]) == 0){
			dbg_print(" match ESSID {%s} by scanning\n", essid);
			spin_unlock(&(table->st_lock));
			return 1;
		}
	}
	spin_unlock(&(table->st_lock));
	return 0;
}

void ieee80211_essid_delete(int index)
{
	int i;
	struct ieee80211vap *vap = g_essid_table[index].vap;

	dbg_print(" timeout ! delete [%d]{%s} ESSID\n",index, g_essid_table[index].essid);

	for(i = 0; i < IEEE80211_STORE_VAP_ESSID; i++)
	{
		if(vap->iv_essid_index[i] == index){
			vap->iv_essid_index[i] = -1;
			vap->iv_essid_cnt--;
			break;
		}
	}

	OS_MEMSET(&g_essid_table[index], 0, sizeof(struct ieee80211_essid_table));
}

void ieee80211_save_essid(struct ieee80211vap *vap, char *essid,
		u_int32_t len, char *mac )
{
	int i, j, t;
	u_int32_t timeout;

	if(0 == essid[0])
		return;

	for(i = 0; i < IEEE80211_STORE_ESSID; i++)
	{
		if(g_essid_table[i].vap == NULL)
			continue;

		timeout = jif2sec(jiffies) - jif2sec(g_essid_table[i].last_time);

		if(timeout >= IEEE80211_STORE_ESSID_TIMEOUT 
				&& (g_essid_table[i].sta_cnt == 0)
				&& (OS_MEMCMP(essid, g_essid_table[i].essid, g_essid_table[i].len) != 0)
				|| ieee80211_check_essid(vap, g_essid_table[i].essid, len) != 0){

			ieee80211_essid_delete(i);

		}else if(OS_MEMCMP(essid, g_essid_table[i].essid, g_essid_table[i].len) == 0){

			g_essid_table[i].last_time = jiffies;

		}
	}

	if(ieee80211_check_essid(vap, essid, len) != 0) 
		return;

	if(vap->iv_essid_cnt >= IEEE80211_STORE_VAP_ESSID)
	{
		dbg_print(" vap's virtual essid is full\n");
		return;
	}

	for(i = 0; i < IEEE80211_STORE_ESSID; i++)
	{
		if(g_essid_table[i].vap == NULL)
			continue;

		if(OS_MEMCMP(g_essid_table[i].essid, essid, len) == 0){
			dbg_print(" {%s} ESSID has be registered\n",essid);
			g_essid_table[i].probe_cnt ++;
			g_essid_table[i].last_time = jiffies;
			return;
		}
	}

	if(i == IEEE80211_STORE_ESSID){
		for(j = 0; j < IEEE80211_STORE_ESSID; j++){
			if(g_essid_table[j].vap == NULL){
				dbg_print(" register {%s} ESSID in the table\n",essid);
				OS_MEMCPY(g_essid_table[j].essid, essid, len);
				g_essid_table[j].len = len;
				g_essid_table[j].probe_cnt++;
				g_essid_table[j].vap = vap;
				g_essid_table[j].last_time = jiffies;

				for (t = 0; t < IEEE80211_STORE_VAP_ESSID; t++)
				{
					if(vap->iv_essid_index[t] == -1){
						vap->iv_essid_index[t] = j;
						vap->iv_essid_cnt++;
						break;
					}

				}
#if 0 
				for (t = 0; t < IEEE80211_STORE_VAP_ESSID; t++)
				{
					if(vap->iv_essid_index[t] < 0)
						continue;

					printk("%d : %s : %d\n", vap->iv_essid_index[t], g_essid_table[vap->iv_essid_index[t]].essid,
							g_essid_table[vap->iv_essid_index[t]].sta_cnt);
				}
				printk("\n");
#endif
				return;
			}
		}

	}
}

int ieee80211_verify_openssid(struct ieee80211vap *vap,struct ieee80211_node *ni, char *ssid)
{
	int i;
	int index;
	if(ssid[1] <= 0 || vap->iv_essid_cnt <= 0 )
		return 0;

	for(i = 0; i < IEEE80211_STORE_VAP_ESSID; i++)
	{
		index = vap->iv_essid_index[i];
		if(index < 0)
			continue;

		if(OS_MEMCMP(g_essid_table[index].essid, ssid + 2, ssid[1]) == 0)
		{
			dbg_print(" {%s} ESSID asreq match\n",g_essid_table[index].essid);

			g_essid_table[index].sta_cnt++;

			if(ni != vap->iv_bss){
				OS_MEMCPY(ni->ni_essid, ssid + 2, ssid[1]);
				ni->ni_esslen = ssid[1];
			}

			return 1;
		}
	}

	return 0;
}

void node_free_openessid(struct ieee80211vap *vap, struct ieee80211_node *ni)
{
	int i,index;

	if(ni != vap->iv_bss)
	{
		for(i = 0; i < IEEE80211_STORE_VAP_ESSID; i++)
		{
			index = vap->iv_essid_index[i];

			if(index < 0)
				continue;

			if(OS_MEMCMP(ni->ni_essid, g_essid_table[index].essid, g_essid_table[index].len) != 0){

				continue;

			}else{

				g_essid_table[index].sta_cnt--;
				break;
			}

		}

	}
	return;
}
